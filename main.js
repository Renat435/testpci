/**
 * Icons credit cards
 * @type {[{regex: RegExp, name: string, icon: string, maxLength: number}]}
 */
const cardsRegex = [
    {
        name: "amex",
        regex: /^3[47]\d{0,13}/,
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 112.92 780 274.08">     <path d="m575.6 145.1-15 35h30.2l-15.2-35zm-174.1 21.7c2.8-1.4 4.5-4.5 4.5-8.3 0-3.8-1.8-6.5-4.6-7.8a23.4 23.4 0 0 0-10.4-1.6h-27v19.5h26.6c4.3 0 7.8 0 10.9-1.8zm-346-21.7-15 35h30l-15-35zm694.7 224.5h-42.4v-18.9H750c4.2 0 7.1-.5 8.9-2.1a7.6 7.6 0 0 0 2.6-5.8 7 7 0 0 0-2.7-5.8c-1.6-1.3-3.9-2-7.7-2-20.6-.6-46.3.7-46.3-27.2 0-12.7 8.5-26.1 31.5-26.1h43.6v-17.5h-40.5a47.2 47.2 0 0 0-27.5 7.2v-7.2h-60c-9.6 0-20.9 2.3-26.2 7.2v-7.2H518.5v7.2a59 59 0 0 0-29.5-7.2h-70.8v7.2c-6.7-6.3-21.7-7.2-30.9-7.2h-79L290 283l-17-18.8H155v122.7h116l18.6-19.1 17.6 19 71.4.1v-28.8h7c9.6.1 20.7-.3 30.6-4.4V387h59v-32h2.8c3.6 0 4 .1 4 3.6v28.3h179.1c11.4 0 23.3-2.7 29.9-7.8v7.8h56.8a79 79 0 0 0 32.1-5.6v-22.9c-5.3 7.5-15.7 11.3-29.7 11.3zm-363.6-29h-27.3v29.5h-42.7l-27-29.1-28 29.1h-86.9v-88H263l27 29 27.9-29h70c17.4 0 37 4.7 37 29 0 24.5-19 29.5-38.2 29.5zm131.6-4c3 4.3 3.5 8.3 3.6 16v17.5h-22v-11c0-5.3.5-13.1-3.6-17.2-3.2-3.2-8-3.9-16-3.9h-23.5v32.1h-22v-88h50.6c11.1 0 19.2.6 26.4 4.2 7 4 11.3 9.5 11.3 19.6 0 14-9.8 21.1-15.6 23.3 5 1.8 8.9 4.9 10.8 7.4zm90.5-36.2h-51.3v16h50v17.9h-50v17.5h51.3v18.3h-73.1v-88h73.1v18.3zm56.4 69.7h-42.7v-18.9h42.5c4.2 0 7.1-.5 9-2.1a7.7 7.7 0 0 0-.1-11.6c-1.7-1.3-4-2-7.8-2-20.5-.6-46.2.7-46.2-27.1 0-12.8 8.4-26.2 31.3-26.2h44v18.7H655c-4 0-6.6.1-8.8 1.6-2.4 1.4-3.3 3.5-3.3 6.3 0 3.3 2 5.6 4.8 6.6 2.3.7 4.8 1 8.5 1l11.8.3c12 .2 20.1 2.2 25 7 4.3 4.3 6.6 9.6 6.6 18.7 0 18.9-12.3 27.7-34.4 27.7zm-170-68.3a22.4 22.4 0 0 0-10.5-1.6h-27v19.7h26.6c4.3 0 7.9-.1 10.8-1.8 2.9-1.6 4.6-4.6 4.6-8.4s-1.7-6.5-4.6-8zm245-1.6c-4 0-6.7.1-9 1.6-2.3 1.4-3.2 3.5-3.2 6.3 0 3.3 2 5.6 4.8 6.6 2.4.7 4.8 1 8.5 1l11.9.3c12 .2 20 2.2 24.9 7 .8.7 1.4 1.5 2 2.2v-25h-40zm-352.7 0h-28.6v22.4H387c8.4 0 13.7-4 13.7-11.6 0-7.7-5.5-10.8-13.4-10.8zm-190.8 0v16h48.1v18h-48.1v17.4h53.9l25-25.8-24-25.6h-55zm140.7 61.5v-70.5l-33.6 34.7 33.6 35.8zM198.4 220.5v15.2h183.2l-.1-32h3.5c2.5 0 3.3.2 3.3 4.2v27.8H483v-7.5c7.6 4 19.5 7.5 35.2 7.5H558l8.6-19.5h18.9l8.3 19.5h76.8V217l11.7 18.6h61.5V113H683v14.5l-8.5-14.5h-62.5v14.5L604 113h-84.4a78.6 78.6 0 0 0-36.6 7.2V113h-58.3v7.2c-6.4-5.5-15-7.2-24.7-7.2H187l-14.3 31.7-14.6-31.7H91v14.5L83.7 113H26.6L0 171.4V218l39.3-87.9h32.5l37.3 83.2v-83.2H145l28.7 59.6 26.4-59.6h36.5V218H214v-68.8L182 218H163L131 149.1V218H86.4L78 198.4H32.3L23.8 218H0v17.7h37.5l8.4-19.5h19l8.4 19.5H147v-15l6.5 15h38.3l6.6-15.2zm288.7-80.1c7-7 18.2-10.3 33.3-10.3h21.2v18.8h-20.8c-8 0-12.5 1.2-16.9 5.2-3.7 3.7-6.3 10.7-6.3 20 0 9.4 2 16.2 6 20.6 3.4 3.5 9.6 4.5 15.3 4.5h9.9l30.9-69.1h32.9l37 83.1v-83.1h33.5l38.5 61.2v-61.2h22.5V218H693l-41.6-66v66h-44.6l-8.6-19.6h-45.5l-8.3 19.6h-25.6c-10.7 0-24.2-2.3-31.8-9.7-7.7-7.5-11.7-17.6-11.7-33.6 0-13 2.3-25 11.8-34.3zM442 130h22.3V218H442v-87.9zm-100.9 0h50.4c11.2 0 19.5.3 26.6 4.2 7 4 11 9.7 11 19.5 0 14-9.7 21.2-15.4 23.4 4.8 1.8 9 4.8 10.9 7.4 3 4.4 3.6 8.3 3.6 16.1V218h-22.1v-11c0-5.4.4-13-3.6-17.2-3.2-3.1-8-3.8-16-3.8H363v32h-21.9v-87.9zm-88.4 0H326v18.3h-51.4v15.8h50.1v18h-50v17.6H326V218h-73.3V130z" fill="#2557D6"></path> </svg>',
        maxLength: 17,
    },
    // {
    //     name: "discover",
    //     regex: /^(?:6011|65\d{0,2}|64[4-9]\d?)\d{0,12}/,
    //     icon: "",
    //     maxLength: 19,
    // },
    {
        name: "diners",
        regex: /^3(?:0([0-5]|9)|[689]\d?)\d{0,11}/,
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="180.1 83.4 419.9 333.2">     <path d="M600 251.4c0-99.4-83-168-174-168h-78.2c-92 0-167.7 68.7-167.7 168 0 91 75.7 165.7 167.7 165.2H426c91 .5 174-74.2 174-165.2z" fill="#0079BE"></path>     <path d="M348.3 97.4c-84 0-152.2 68.3-152.2 152.6s68.1 152.5 152.2 152.6c84 0 152.2-68.3 152.2-152.6S432.4 97.5 348.3 97.4z" fill="#fff"></path>     <path d="M252 249.6a96.9 96.9 0 0 1 62-90.3v180.5a96.8 96.8 0 0 1-62-90.2zm131 90.3V159.4a96.8 96.8 0 0 1 0 180.5z" fill="#0079BE"></path> </svg>',
        maxLength: 16,
    },
    {
        name: "mastercard",
        regex: /^(5[1-5]\d{0,2}|22[2-9]\d{0,1}|2[3-7]\d{0,2})\d{0,12}/,
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="90 70.5 599.95 359.06">     <path d="M449 250a179.5 179.5 0 1 1-359 0 179.5 179.5 0 0 1 359 0" fill="#D9222A"></path>     <path d="M510.5 70.5A178.8 178.8 0 0 0 371.9 136H408c5 6 9.6 12.3 13.7 19h-63.6c-3.8 6-7.3 12.4-10.4 19h84.4c2.8 6.2 5.4 12.5 7.6 19h-99.6c-2 6.2-3.8 12.6-5.2 19h110a180.4 180.4 0 0 1-5.2 95h-99.6c2.2 6.5 4.7 12.8 7.6 19h84.4c-3.1 6.6-6.6 13-10.4 19h-63.6c4.1 6.7 8.7 13 13.7 19H408a179.4 179.4 0 0 1-18.1 19A179.5 179.5 0 1 0 510.5 70.5" fill="#EE9F2D"></path>     <path d="M666 350a5.8 5.8 0 1 1 11.7 0 5.8 5.8 0 0 1-11.6 0zm5.9 4.5a4.4 4.4 0 0 0 0-8.8c-2.5 0-4.4 2-4.4 4.3 0 2.5 2 4.5 4.4 4.5zm-.8-1.9h-1.2v-5h2.1c.5 0 1 0 1.4.2.4.2.6.7.6 1.2 0 .6-.3 1.1-.9 1.4l1 2.2h-1.4l-.7-2h-1v2zm0-2.9h1.4c.2-.2.3-.4.3-.7 0-.2-.1-.4-.3-.5-.2-.1-.6 0-.8 0h-.6v1.2zm-443.5-80c-2-.3-3-.3-4.4-.3-11 0-16.6 3.7-16.6 11.2 0 4.6 2.7 7.6 7 7.6 8 0 13.6-7.6 14-18.5zm14.2 33h-16.2l.4-7.7c-5 6-11.5 9-20.4 9-10.6 0-17.9-8.3-17.9-20.3 0-18 12.6-28.5 34.3-28.5 2.2 0 5 .2 8 .5.5-2.4.7-3.5.7-4.8 0-4.9-3.4-6.7-12.5-6.7a64.6 64.6 0 0 0-20.7 3.3l2.7-16.6c9.8-2.9 16.2-4 23.4-4 16.7 0 25.6 7.6 25.5 21.8 0 3.8-.5 8.5-1.5 14.6-1.7 10.8-5.3 33.7-5.8 39.4zm-62.2 0h-19.5l11.2-70-25 70h-13.2l-1.7-69.6-11.7 69.6h-18.2l15.2-91.1h28l1.7 51 17.1-51h31.2l-15.1 91m355-33c-2-.2-3-.2-4.4-.2-11 0-16.6 3.7-16.6 11.2 0 4.6 2.7 7.6 7 7.6 8 0 13.6-7.6 14-18.5zm14.2 33h-16.2l.4-7.6c-5 6-11.5 9-20.5 9-10.5 0-17.8-8.3-17.8-20.3 0-18 12.6-28.5 34.3-28.5 2.2 0 5 .2 7.9.5.6-2.4.8-3.5.8-4.8 0-4.9-3.4-6.7-12.5-6.7a64.7 64.7 0 0 0-20.7 3.3l2.7-16.6c9.8-2.9 16.2-4 23.4-4 16.7 0 25.6 7.6 25.5 21.8 0 3.8-.6 8.5-1.5 14.6-1.7 10.8-5.4 33.7-5.8 39.4zm-220.4-1a44.5 44.5 0 0 1-14 2.3c-10 0-15.4-5.7-15.4-16.2-.2-3.3 1.4-12 2.6-19.8l8.5-50.5h19.4l-2.3 11.2h11.7l-2.7 17.8h-11.7c-2.2 14-5.4 31.6-5.5 34 0 3.8 2 5.4 6.7 5.4 2.2 0 4-.2 5.2-.7l-2.5 16.4m59.4-.6c-6.7 2-13.1 3-20 3-21.6 0-33-11.3-33-33 0-25.3 14.5-44 34-44 16 0 26.2 10.5 26.2 26.8 0 5.5-.7 10.8-2.4 18.3H354c-1.3 10.7 5.6 15.2 16.8 15.2 7 0 13.2-1.5 20.2-4.7l-3.2 18.4zm-11-43.9c.2-1.5 2.1-13.2-9-13.2-6.1 0-10.5 4.7-12.3 13.2h21.4zm-123.4-5c0 9.4 4.6 15.8 14.9 20.7 7.9 3.7 9.1 4.8 9.1 8.2 0 4.6-3.5 6.7-11.2 6.7-5.8 0-11.2-1-17.5-3l-2.6 17.1c4.4 1 8.3 1.9 20.2 2.2 20.6 0 30.1-7.8 30.1-24.7 0-10.2-4-16.2-13.7-20.7-8.2-3.7-9.1-4.5-9.1-8 0-4 3.2-6 9.5-6 3.8 0 9 .4 14 1l2.8-17.1c-5-.8-12.7-1.5-17.2-1.5-21.8 0-29.3 11.4-29.3 25.1M482.5 229c5.4 0 10.5 1.4 17.4 5l3.2-19.8c-2.8-1.2-12.9-7.7-21.4-7.7-13 0-24 6.4-31.8 17.1-11.3-3.7-16 3.8-21.7 11.4l-5 1.1c.4-2.4.7-4.9.6-7.4h-18c-2.4 23-6.7 46.1-10 69l-1 5h19.5c3.3-21 5-34.6 6.2-43.8l7.3-4c1-4.2 4.5-5.5 11.4-5.4-1 5-1.4 10.1-1.4 15.2 0 24.2 13.1 39.3 34 39.3 5.5 0 10.1-.7 17.3-2.6l3.4-20.8a37.9 37.9 0 0 1-16.5 4.7c-11.4 0-18.2-8.4-18.2-22.2 0-20 10.2-34.1 24.7-34.1"></path>     <path d="M185.2 297.2h-19.5l11.2-70-25 70h-13.2l-1.7-69.5-11.7 69.5h-18.2l15.2-91h28l.8 56.4 19-56.4h30.2l-15 91" fill="#fff"></path>     <path d="m647.5 211.6-4.3 26.3c-5.3-7-11-12-18.6-12-9.8 0-18.8 7.4-24.7 18.3-8.1-1.6-16.6-4.5-16.6-4.5.7-6 1-9.8 1-11.1h-18c-2.4 23-6.8 46.1-10.2 69l-.8 5h19.4c2.7-17 4.7-31.2 6.2-42.5 6.6-6 10-11.3 16.7-11-3 7.3-4.7 15.6-4.7 24.1 0 18.5 9.3 30.7 23.5 30.7a23 23 0 0 0 18-8.1l-1 6.8H652l14.8-91h-19.2zm-24.4 74c-6.6 0-10-5-10-14.7 0-14.5 6.3-24.8 15.2-24.8 6.7 0 10.3 5 10.3 14.5 0 14.7-6.4 25-15.5 25z"></path>     <path d="M233.2 264.3c-2-.3-3-.3-4.4-.3-11 0-16.6 3.7-16.6 11.2 0 4.6 2.7 7.6 7 7.6 8 0 13.7-7.6 14-18.5zm14.2 33h-16.2l.4-7.7c-5 6-11.5 9-20.4 9-10.6 0-17.8-8.3-17.8-20.3 0-18 12.6-28.5 34.2-28.5 2.2 0 5 .2 8 .5.5-2.4.7-3.5.7-4.8 0-4.9-3.4-6.7-12.5-6.7a65 65 0 0 0-20.6 3.3l2.7-16.6c9.7-2.9 16-4 23.3-4 16.7 0 25.6 7.6 25.6 21.8 0 3.8-.6 8.5-1.6 14.6-1.7 10.8-5.3 33.8-5.8 39.3zm261.3-88.6-3.1 19.7c-7-3.5-12-4.9-17.5-4.9-14.5 0-24.7 14-24.7 34.1 0 13.8 6.9 22.2 18.2 22.2 4.8 0 10-1.5 16.5-4.7l-3.4 20.8c-7.2 2-11.8 2.6-17.2 2.6-21 0-34-15-34-39.3 0-32.5 18-55.3 43.8-55.3 8.5 0 18.6 3.6 21.4 4.8m31.5 55.6c-2-.3-3-.3-4.4-.3-11 0-16.6 3.7-16.6 11.2 0 4.6 2.7 7.6 7 7.6 8 0 13.7-7.6 14-18.5zm14.2 33h-16.2l.4-7.7c-5 6-11.5 9-20.4 9-10.6 0-17.8-8.3-17.8-20.3 0-18 12.6-28.5 34.2-28.5 2.2 0 5 .2 8 .5.5-2.4.7-3.5.7-4.8 0-4.9-3.4-6.7-12.5-6.7a65.1 65.1 0 0 0-20.6 3.3l2.7-16.6c9.7-2.9 16-4 23.3-4 16.7 0 25.6 7.6 25.6 21.8 0 3.8-.6 8.5-1.6 14.6-1.7 10.8-5.3 33.8-5.8 39.3zM334 296a44.6 44.6 0 0 1-14 2.4c-10 0-15.4-5.7-15.4-16.2-.2-3.3 1.4-12 2.7-19.8 1-6.9 8.4-50.5 8.4-50.5h19.4l-2.3 11.2h10L340 241h-10c-2.2 14-5.4 31.6-5.5 34 0 3.8 2 5.4 6.7 5.4 2.2 0 4-.2 5.3-.7l-2.6 16.4m59.4-.6c-6.7 2-13.1 3-20 3-21.6 0-32.9-11.3-32.9-33 0-25.3 14.4-44 33.9-44 16 0 26.2 10.5 26.2 26.8 0 5.5-.7 10.8-2.4 18.3h-38.6c-1.3 10.7 5.6 15.2 16.9 15.2 6.9 0 13.1-1.5 20-4.7l-3.1 18.4zm-11-43.9c.2-1.5 2.1-13.2-9-13.2-6.1 0-10.5 4.7-12.3 13.2h21.4zm-123.3-5c0 9.4 4.5 15.8 14.8 20.7 7.9 3.7 9.1 4.8 9.1 8.2 0 4.6-3.5 6.7-11.2 6.7-5.8 0-11.2-1-17.4-3l-2.7 17.1c4.4 1 8.4 1.9 20.3 2.2 20.5 0 30-7.8 30-24.7 0-10.2-4-16.2-13.7-20.7-8.2-3.7-9.1-4.5-9.1-8 0-4 3.2-6 9.5-6 3.8 0 9 .4 14 1l2.8-17.1a132 132 0 0 0-17.2-1.5c-21.8 0-29.3 11.4-29.2 25.1m398.4 50.6h-18.4l.9-6.8a23 23 0 0 1-18 8.1c-14.1 0-23.5-12.2-23.5-30.7 0-24.6 14.5-45.4 31.7-45.4 7.6 0 13.3 3.1 18.6 10.1l4.3-26.3h19.3l-14.9 91zm-28.7-17c9 0 15.4-10.3 15.4-25 0-9.4-3.6-14.5-10.3-14.5-8.8 0-15.1 10.3-15.1 24.8 0 9.7 3.3 14.6 10 14.6zm-56.9-57c-2.4 23-6.8 46.1-10.1 69l-1 5h19.6c7-45.2 8.6-54 19.5-53 1.8-9.2 5-17.3 7.4-21.4-8.1-1.7-12.7 2.9-18.6 11.6.4-3.8 1.3-7.4 1.1-11.2H572m-160.4 0c-2.4 23-6.8 46.1-10.2 69l-.9 5H420c7-45.2 8.7-54 19.6-53 1.8-9.2 5-17.3 7.4-21.4-8.1-1.7-12.7 2.9-18.7 11.6.5-3.8 1.4-7.4 1.2-11.2h-17.9m254.6 68.2c0-3.2 2.6-5.7 5.8-5.8a5.8 5.8 0 1 1-5.8 5.8zm5.8 4.5a4.4 4.4 0 0 0 0-8.8 4.4 4.4 0 0 0 0 8.8zm-.8-2h-1.2v-5h2.1c.5 0 1 0 1.3.3.5.2.7.7.7 1.2 0 .6-.3 1.1-.9 1.3l1 2.3h-1.4l-.7-2h-1v2zm0-2.8h.6l.8-.1c.2-.1.3-.4.3-.6 0-.2-.2-.4-.3-.5-.2-.1-.6 0-.8 0h-.6v1.2z" fill="#fff"></path></svg>',
        maxLength: 19,
    },
    {
        name: "jcb15",
        regex: /^(?:2131|1800)\d{0,11}/,
        icon: '<svg viewBox="147.8 63.5 484.4 373.1"><path d="M632.2 361.3a75.4 75.4 0 0 1-75.3 75.3H147.8V138.7A75.4 75.4 0 0 1 223 63.5h409.1v297.9z" fill="#fff"></path><linearGradient id="a" x1="908.7" x2="909.7" y1="313.2" y2="313.2" gradientTransform="matrix(132.87 0 0 323.02 -120270 -100930)" gradientUnits="userSpaceOnUse"><stop stop-color="#007B40" offset="0"></stop><stop stop-color="#55B330" offset="1"></stop></linearGradient><path d="M498.9 256.5c11.6.3 23.4-.5 35 .4 11.8 2.2 14.7 20 4.2 26-7.2 3.8-15.6 1.4-23.4 2H499v-28.4zm41.8-32.1c2.6 9.2-6.2 17.4-15 16.1h-26.8c.1-8.6-.4-18 .2-26.2 10.8.3 21.6-.6 32.2.5 4.6 1.1 8.5 5 9.4 9.6zm64.4-136c.5 17.6 0 36 .2 53.9V360a54 54 0 0 1-51.6 51.4h-81.2V301.8c29.5-.2 59 .3 88.4-.3 13.7-.8 28.7-9.8 29.3-24.9 1.6-15-12.6-25.5-26.1-27.2-5.2-.1-5-1.5 0-2.1 12.9-2.8 23-16.1 19.2-29.5-3.2-14-18.8-19.5-31.7-19.5-26.4-.2-52.7 0-79 0 .1-20.5-.4-41 .2-61.5a54 54 0 0 1 53.5-48.3H605z" fill="url(#a)"></path><linearGradient id="b" x1="908.7" x2="909.7" y1="313.2" y2="313.2" gradientTransform="matrix(133.43 0 0 323.02 -121080 -100920)" gradientUnits="userSpaceOnUse"><stop stop-color="#1D2970" offset="0"></stop><stop stop-color="#006DBA" offset="1"></stop></linearGradient><path d="M174.7 139.5a54 54 0 0 1 52-51h80.8c-.1 90.9.1 181.8-.2 272.7a54 54 0 0 1-51.6 50.3h-81V298.1c26.2 6.2 53.7 8.8 80.4 4.7 16-2.6 33.5-10.4 39-27 4-14.2 1.7-29.2 2.3-43.7v-33.9H250c-.2 22.4.4 44.8-.4 67.2-1.2 13.7-14.8 22.4-27.8 22-16 .1-47.9-11.7-47.9-11.7 0-41.9.5-94.4.7-136.2z" fill="url(#b)"></path><linearGradient id="c" x1="908.7" x2="909.7" y1="313.2" y2="313.2" gradientTransform="matrix(132.96 0 0 323.03 -120500 -100930)" gradientUnits="userSpaceOnUse"><stop stop-color="#6E2B2F" offset="0"></stop><stop stop-color="#E30138" offset="1"></stop></linearGradient><path d="M324.7 211.9c-2.4.5-.5-8.3-1-11.7 0-21.1-.4-42.3.2-63.4a54 54 0 0 1 53.7-48.3h78.8c0 90.9.1 181.8-.1 272.7a54 54 0 0 1-51.7 50.3h-81V287.2c18.4 15.1 43.5 17.5 66.5 17.5 17.3 0 34.5-2.6 51.3-6.6v-22.8c-19 9.4-41.2 15.4-62.2 10a33.9 33.9 0 0 1-25-33c-1.8-15.7 7.5-32.3 23-37 19.1-6 40-1.4 58 6.5 3.9 2 7.8 4.5 6.2-2V202c-30-7.1-62-9.8-92.3-2a67.7 67.7 0 0 0-24.4 12z" fill="url(#c)"></path></svg>',
        maxLength: 17,
    },
    {
        name: "jcb",
        regex: /^(?:35\d{0,2})\d{0,12}/,
        icon: '<svg viewBox="147.8 63.5 484.4 373.1"><path d="M632.2 361.3a75.4 75.4 0 0 1-75.3 75.3H147.8V138.7A75.4 75.4 0 0 1 223 63.5h409.1v297.9z" fill="#fff"></path><linearGradient id="a" x1="908.7" x2="909.7" y1="313.2" y2="313.2" gradientTransform="matrix(132.87 0 0 323.02 -120270 -100930)" gradientUnits="userSpaceOnUse"><stop stop-color="#007B40" offset="0"></stop><stop stop-color="#55B330" offset="1"></stop></linearGradient><path d="M498.9 256.5c11.6.3 23.4-.5 35 .4 11.8 2.2 14.7 20 4.2 26-7.2 3.8-15.6 1.4-23.4 2H499v-28.4zm41.8-32.1c2.6 9.2-6.2 17.4-15 16.1h-26.8c.1-8.6-.4-18 .2-26.2 10.8.3 21.6-.6 32.2.5 4.6 1.1 8.5 5 9.4 9.6zm64.4-136c.5 17.6 0 36 .2 53.9V360a54 54 0 0 1-51.6 51.4h-81.2V301.8c29.5-.2 59 .3 88.4-.3 13.7-.8 28.7-9.8 29.3-24.9 1.6-15-12.6-25.5-26.1-27.2-5.2-.1-5-1.5 0-2.1 12.9-2.8 23-16.1 19.2-29.5-3.2-14-18.8-19.5-31.7-19.5-26.4-.2-52.7 0-79 0 .1-20.5-.4-41 .2-61.5a54 54 0 0 1 53.5-48.3H605z" fill="url(#a)"></path><linearGradient id="b" x1="908.7" x2="909.7" y1="313.2" y2="313.2" gradientTransform="matrix(133.43 0 0 323.02 -121080 -100920)" gradientUnits="userSpaceOnUse"><stop stop-color="#1D2970" offset="0"></stop><stop stop-color="#006DBA" offset="1"></stop></linearGradient><path d="M174.7 139.5a54 54 0 0 1 52-51h80.8c-.1 90.9.1 181.8-.2 272.7a54 54 0 0 1-51.6 50.3h-81V298.1c26.2 6.2 53.7 8.8 80.4 4.7 16-2.6 33.5-10.4 39-27 4-14.2 1.7-29.2 2.3-43.7v-33.9H250c-.2 22.4.4 44.8-.4 67.2-1.2 13.7-14.8 22.4-27.8 22-16 .1-47.9-11.7-47.9-11.7 0-41.9.5-94.4.7-136.2z" fill="url(#b)"></path><linearGradient id="c" x1="908.7" x2="909.7" y1="313.2" y2="313.2" gradientTransform="matrix(132.96 0 0 323.03 -120500 -100930)" gradientUnits="userSpaceOnUse"><stop stop-color="#6E2B2F" offset="0"></stop><stop stop-color="#E30138" offset="1"></stop></linearGradient><path d="M324.7 211.9c-2.4.5-.5-8.3-1-11.7 0-21.1-.4-42.3.2-63.4a54 54 0 0 1 53.7-48.3h78.8c0 90.9.1 181.8-.1 272.7a54 54 0 0 1-51.7 50.3h-81V287.2c18.4 15.1 43.5 17.5 66.5 17.5 17.3 0 34.5-2.6 51.3-6.6v-22.8c-19 9.4-41.2 15.4-62.2 10a33.9 33.9 0 0 1-25-33c-1.8-15.7 7.5-32.3 23-37 19.1-6 40-1.4 58 6.5 3.9 2 7.8 4.5 6.2-2V202c-30-7.1-62-9.8-92.3-2a67.7 67.7 0 0 0-24.4 12z" fill="url(#c)"></path></svg>',
        maxLength: 19,
    },
    {
        name: "maestro",
        regex: /^(?:5[0678]\d{0,2}|6304|67\d{0,2})\d{0,12}/,
        icon: '<svg viewBox="90.05 70.5 599.95 359">     <path d="M690 250a179.5 179.5 0 1 1-359 0 179.5 179.5 0 0 1 359 0" fill="#D9222A"></path><path d="M371.9 364c-5-6-9.6-12.4-13.7-19h63.6c3.8-6.1 7.3-12.5 10.3-19H348c-3-6.2-5.5-12.6-7.6-19h99.4a179.3 179.3 0 0 0 5.2-95H335.1c1.4-6.4 3.1-12.8 5.2-19h99.4c-2.1-6.5-4.7-12.8-7.6-19H348a181 181 0 0 1 10.3-19h63.6c-4.2-6.6-8.7-13-13.7-19H372a181 181 0 0 1 18.1-19 179.5 179.5 0 1 0 18.1 247H372" fill="#0097D0"></path><path d="M666 350a5.8 5.8 0 1 1 11.7 0 5.8 5.8 0 0 1-11.6 0zm5.9 4.4c2.4 0 4.4-2 4.4-4.3a4.4 4.4 0 1 0-8.8 0c0 2.4 2 4.3 4.4 4.3zm-.8-1.8h-1.2v-5.1h2.1c.5 0 1 0 1.3.3.5.2.7.7.7 1.2 0 .6-.3 1.1-.9 1.3l1 2.3h-1.4l-.7-2h-1v2zm0-2.9h1.4c.2-.2.3-.5.3-.7 0-.2-.1-.4-.3-.5l-.8-.1h-.6v1.3zm-283.7-51.2c-7.6 2-15 3-22.9 3-25 0-38-11.4-38-33.2 0-25.4 16.6-44.2 39-44.2 18.5 0 30.2 10.5 30.2 27a70 70 0 0 1-2.7 18.3h-44.5c-1.6 10.6 6.2 15.3 19.4 15.3 8 0 15.1-1.5 23-4.6l-3.5 18.4zm-12-44.1c0-1.7 2.6-13-10.3-13.3-7.1 0-12.2 4.7-14.3 13.3h24.7zm27.1-5c0 9.4 5.3 15.9 17.3 20.7 9.2 3.8 10.7 4.9 10.7 8.2 0 4.7-4 6.8-13.1 6.8-6.8 0-13-1-20.3-3l-3.2 17.2c6.5 1.5 15.6 2 23.7 2.2 24 0 35-7.9 35-24.9 0-10.2-4.6-16.2-16-20.7-9.5-3.8-10.6-4.6-10.6-8 0-4.1 3.8-6.2 11.1-6.2 4.5 0 10.6.5 16.4 1.2l3.3-17.3c-6-.8-15-1.5-20.1-1.5-25.5 0-34.3 11.5-34.2 25.3m-88.2 50.9h-18.7l.5-7.8c-5.7 6.1-13.3 9-23.6 9-12.2 0-20.5-8.3-20.5-20.3 0-18.2 14.5-28.7 39.4-28.7 2.6 0 5.8.2 9.2.6.7-2.5.9-3.5.9-4.8 0-5-4-6.8-14.5-6.8a86.1 86.1 0 0 0-23.8 3.3l3.2-16.7a102 102 0 0 1 26.9-4c19.3 0 29.5 7.6 29.5 21.8.1 3.8-1.2 11.4-1.9 14.8-.7 4.8-6 33-6.6 39.6zM297.9 267c-2.4-.3-3.4-.3-5-.3-12.7 0-19.2 3.8-19.2 11.2 0 4.7 3.1 7.7 8 7.7 9.2 0 15.8-7.7 16.2-18.6zM492 299a58 58 0 0 1-16 2.4c-11.5 0-17.7-5.8-17.7-16.2-.4-2.9 2.4-16.1 3-19.8L472 208H494l-3.4 17.8h11.4l-3 18.2h-11.5s-6.3 31.5-6.3 34c0 3.8 2.3 5.4 7.6 5.4 2.6 0 4.5-.2 6-.7l-2.9 16.4m99.2-75c-16.2 0-29 6.7-36.3 18l6.4-16.7c-11.8-4.3-19.5 1.9-26.4 10.7l-2.3 2.8v-13h-20.8c-2.8 23-7.8 46.3-11.7 69.4l-1 5h22.5c2-11.7 3.8-21.2 5.6-28.8 4.7-20.8 12.8-27.1 24.8-24.3-2.8 6-4.3 12.9-4.3 20.5 0 18.6 10 33.8 35.1 33.8 25.3 0 43.6-13.5 43.6-44.3 0-18.6-12.2-33-35.2-33zm-6.5 59.3c-8 .2-12.7-6.5-12.7-16.4 0-11.8 7-25.1 18.3-25.1 9 0 12.2 7.2 12.2 14.8 0 16.8-7 26.7-17.8 26.7zm-343.2 16.9h-22.3l13.3-70-30.6 70h-20.4l-3.7-69.6-13.3 69.6h-20.3l17.3-91h34.9l3 50.7 22-50.7h37.7l-17.6 91"></path><path d="M628.1 288.9a5.8 5.8 0 0 1 11.6 0 5.8 5.8 0 1 1-11.5 0zm5.8 4.4a4.4 4.4 0 1 0 0-8.8 4.4 4.4 0 0 0 0 8.8zm-.7-1.9H632v-5h2.1c.5 0 1 0 1.3.2.4.3.7.8.7 1.3s-.4 1-1 1.3l1 2.2h-1.3l-.8-2h-.8v2zm0-2.9H634.5l.3-.6c0-.3 0-.4-.2-.6h-1.4v1.2zM393 293c-7.7 2-15.1 3-23 3-25 0-38-11.4-38-33.2 0-25.5 16.6-44.2 39-44.2 18.5 0 30.3 10.5 30.3 27 0 5.4-.8 10.7-2.8 18.3h-44.5c-1.6 10.6 6.2 15.3 19.4 15.3 8 0 15.1-1.5 23-4.6l-3.4 18.4zm-12-44.2c0-1.6 2.5-13-10.4-13.2-7.1 0-12.2 4.7-14.3 13.2h24.7zm27-5c0 9.5 5.3 16 17.4 20.8 9.2 3.8 10.6 4.8 10.6 8.2 0 4.7-4 6.8-13 6.8-6.9 0-13-1-20.3-3l-3.3 17.2c6.5 1.5 15.6 2 23.7 2.2 24 0 35-7.9 35-24.9 0-10.2-4.5-16.2-16-20.7-9.5-3.8-10.6-4.6-10.6-8 0-4.1 3.8-6.2 11.1-6.2 4.5 0 10.6.5 16.4 1.2l3.3-17.3c-6-.8-14.9-1.5-20-1.5-25.5 0-34.4 11.5-34.3 25.2m-88.2 51h-18.7l.5-7.8c-5.7 6.1-13.3 9-23.6 9-12.2 0-20.5-8.3-20.5-20.3 0-18.2 14.5-28.7 39.4-28.7 2.6 0 5.8.2 9.2.6.7-2.5.9-3.5.9-4.8 0-5-4-6.9-14.4-6.9a86.3 86.3 0 0 0-23.8 3.4l3.1-16.7c11.2-2.9 18.6-4 26.9-4 19.3 0 29.5 7.6 29.5 21.8.1 3.8-1.2 11.4-1.8 14.8-.8 4.8-6.2 33-6.7 39.6zm-16.4-33.2a42 42 0 0 0-5-.3c-12.7 0-19.2 3.8-19.2 11.2 0 4.7 3.2 7.7 8 7.7 9.2 0 15.8-7.7 16.2-18.6zm194.1 32a58.1 58.1 0 0 1-16 2.4c-11.5 0-17.7-5.8-17.7-16.2-.4-2.9 2.4-16.1 3-19.8l10.6-57.5h22.2l-3.4 17.8h11.4l-3 18.2h-11.5s-6.3 31.5-6.3 34c0 3.8 2.3 5.4 7.6 5.4 2.6 0 4.6-.2 6-.7l-2.9 16.4m110.5-42.4c0 16.8-6.9 26.7-17.8 26.7-7.9.2-12.7-6.5-12.7-16.4 0-11.8 7-25.1 18.3-25.1 9 0 12.2 7.2 12.2 14.8zm24 .5c0-18.6-12.3-33-35.2-33-26.5 0-43.6 17.5-43.6 43.5 0 18.6 10.1 33.8 35.2 33.8 25.2 0 43.6-13.5 43.6-44.3zm-114.7-31.4c-2.8 23-7.8 46.4-11.7 69.5l-1 5h22.5c8-44.6 10.8-57.3 27.7-52.8l8.2-21c-11.9-4.4-19.5 1.8-26.4 10.6.7-4 1.8-7.8 1.6-11.3h-20.9m-270.3 74.5h-22.3l13.3-70-30.6 70h-20.4l-3.7-69.6-13.3 69.6h-20.3l17.3-91H202l1.9 56.3 24.5-56.3h36.4l-17.7 91" fill="#fff"></path> </svg>',
        maxLength: 19,
    },
    {
        name: "mir",
        regex: /^220[0-4]\d{0,12}/,
        icon: '<svg viewBox="42.2 151.4 695.69 197.1">     <style>.prefix__st0{fill:#37a72e}</style><g id="prefix__Page-1"><g id="prefix__Artboard" transform="translate(-91 -154)"><g id="prefix__Group" transform="translate(91 154)"><path id="prefix__Combined-Shape" class="prefix__st0" d="M544.1 240.5v108h60v-64h68a66.6 66.6 0 0 0 62.1-44H544.1z"></path><linearGradient id="prefix__Combined-Shape_4_" gradientUnits="userSpaceOnUse" x1="362.4" y1="275.4" x2="363.4" y2="275.4" gradientTransform="matrix(201.7633 0 0 -79 -72583.8 21950)"><stop offset="0" stop-color="#00a0e5"></stop><stop offset="1" stop-color="#0077c3"></stop></linearGradient><path id="prefix__Combined-Shape_1_" d="M536.1 151.5c3.5 44.1 45.3 79 96.3 79h104.3a66.5 66.5 0 0 0-64.8-79H536.1z" fill="url(#prefix__Combined-Shape_4_)"></path><path id="prefix__Combined-Shape_2_" class="prefix__st0" d="M447.3 229.4v-.1.1a3.6 3.6 0 0 1 3.2-1.9c2 0 3.5 1.6 3.6 3.5v116.5h60v-196h-60a24 24 0 0 0-19.4 12.7L387 266.6l-.5 1.2a4 4 0 0 1-7.3-2.3v-114h-60v196h60c7.5-.4 15.9-5.9 19.1-12.7l49-105.1v-.3z"></path><path id="prefix__Combined-Shape_3_" class="prefix__st0" d="m223.3 232.8-35.1 114.7H145l-35-114.8a3.9 3.9 0 0 0-3.9-3.2 3.9 3.9 0 0 0-3.9 3.9v114h-60v-196H109c11 0 22.6 8.6 25.8 19.1L164 266c1.5 4.8 3.8 4.7 5.3 0l29.2-95.5a28.6 28.6 0 0 1 25.8-19.1h66.8v196h-60V233.3c0-2.2-1.8-3.9-3.9-3.9a4 4 0 0 0-3.9 3.4z"></path></g></g></g> </svg>',
        maxLength: 19,
    },
    {
        name: "visa",
        regex: /^4\d{0,15}/,
        icon: '<svg viewBox="60.1 149 659.7 202">     <path d="M293.2 348.7 326.6 153h53.3l-33.4 195.7h-53.3zm246.1-191.5c-10.6-4-27.1-8.2-47.8-8.2-52.7 0-89.9 26.5-90.2 64.6-.3 28.1 26.5 43.8 46.8 53.2 20.7 9.6 27.7 15.7 27.6 24.2-.1 13.2-16.6 19.2-32 19.2-21.3 0-32.6-3-50.1-10.3l-7-3.1-7.4 43.8a168.9 168.9 0 0 0 59.4 10.4c56.1 0 92.5-26.2 93-66.8.2-22.3-14-39.3-44.8-53.2-18.7-9-30.1-15.1-30-24.3 0-8.1 9.7-16.8 30.6-16.8 17.4-.3 30 3.5 39.9 7.5l4.8 2.2 7.2-42.4m137.3-4.2h-41.2c-12.8 0-22.3 3.5-28 16.2l-79.2 179.4h56l11.3-29.4h68.3l6.5 29.4h49.5L676.6 153zm-65.4 126.4 21.3-54.7c-.4.5 4.3-11.4 7-18.7l3.6 16.8 12.4 56.6h-44.3zM247.9 153l-52.2 133.5-5.6-27.2c-9.7-31.2-40-65.1-73.9-82L164 348.3h56.4l84-195.4H248" fill="#0E4595"></path><path d="M147 153H60.8l-.7 4c67 16.2 111.2 55.4 129.6 102.5l-18.7-90C168 157 158.5 153.4 147 153" fill="#F2AE14"></path> </svg>',
        maxLength: 19,
    },
    {
        name: "unionpay",
        regex: /^62\d{0,14}/,
        icon: '<svg viewBox="104.6 69.8 570.79 360.4">     <path d="M216.4 69.8h142.4c19.9 0 32.3 16.4 27.6 36.5l-66.3 287.4a48.6 48.6 0 0 1-44.5 36.5H133.2c-19.9 0-32.3-16.4-27.6-36.5l66.3-287.4a48.3 48.3 0 0 1 44.4-36.5h.1z" fill="#D10429"></path><path d="M346.3 69.8h163.9c19.8 0 10.8 16.4 6.2 36.5L450 393.7c-4.6 20.1-3.2 36.5-23 36.5H263c-20 0-32.2-16.4-27.5-36.5L302 106.3a48.3 48.3 0 0 1 44.5-36.5h-.2z" fill="#022E64"></path><path d="M504.4 69.8h142.4c19.9 0 32.3 16.4 27.6 36.5l-66.3 287.4a48.6 48.6 0 0 1-44.5 36.5H421.2c-20 0-32.3-16.4-27.6-36.5l66.3-287.4a48.3 48.3 0 0 1 44.4-36.5h.1z" fill="#076F74"></path><path d="M480.5 340.8H494l3.8-13h-13.4l-3.9 13zm10.8-36-4.7 15.5s5-2.6 7.9-3.4c2.8-.6 6.9-1.2 6.9-1.2l3.2-10.7h-13.4v-.1zm6.7-22-4.5 14.7s5-2.3 7.8-3c2.8-.7 7-1 7-1l3.1-10.7H498zm29.7 0-17.4 57.9h4.7l-3.7 12h-4.6l-1.2 3.7H489l1.1-3.7h-33.5l3.3-11h3.4l17.6-59 3.5-12h16.9l-1.8 6s4.5-3.2 8.8-4.3c4.3-1.2 28.7-1.6 28.7-1.6l-3.6 11.8h-5.8v.1z" fill="#FEFEFE"></path><path d="M534.6 270.8h18l.2 6.8c-.1 1.1.8 1.7 3 1.7h3.6l-3.3 11.1h-9.7c-8.4.7-11.6-3-11.4-7l-.3-12.5-.1-.1zm2.2 53.2h-17.2l3-10h19.6l2.8-9h-19.4l3.3-11.2h53.9l-3.4 11.2h-18l-2.9 9h18.1l-3 10h-19.5l-3.5 4.2h8l1.9 12.5c.2 1.3.2 2.1.6 2.6.4.4 2.8.7 4.2.7h2.3l-3.7 12.2h-6l-4.4-.1c-1.9-.2-3.1-1.3-4.4-2a5.8 5.8 0 0 1-3.2-4.2l-1.8-12.5-9 12.3a15.1 15.1 0 0 1-13 6.9h-12.5l3.3-10.9h4.8c1.3 0 2.6-.5 3.5-1a5 5 0 0 0 2.6-2.2l13-18.5zM349 296.8h45.4l-3.3 11h-18L370 317h18.6l-3.4 11.2h-18.5l-4.5 15.2c-.6 1.7 4.4 1.9 6.2 1.9l9.3-1.3-3.7 12.6h-21c-1.6 0-2.8-.2-4.7-.7a4.9 4.9 0 0 1-3.3-2.4c-.7-1.2-2-2.2-1.2-4.9l6-20h-10.3l3.4-11.5h10.4l2.7-9.3h-10.3l3.3-11-.2-.1zm31.4-19.8h18.6l-3.4 11.3H370l-2.7 2.4c-1.3 1.2-1.6.8-3.2 1.6-1.4.7-4.4 2.2-8.3 2.2h-8.2l3.3-11h2.5c2 0 3.5-.2 4.2-.6.9-.5 1.8-1.7 2.7-3.5l4.7-8.6h18.5l-3.2 6.3v-.1zm35.1 18.8s5-4.7 13.8-6.2c2-.4 14.3-.2 14.3-.2l2-6.3h-26.3l-3.8 12.8v-.1zm24.6 4.8h-26l-1.5 5.3h22.6c2.7-.3 3.2.1 3.4-.1l1.6-5.2zm-33.7-29.7h15.8l-2.2 8s5-4 8.4-5.5c3.6-1.3 11.4-2.5 11.4-2.5l25.7-.1-8.8 29.5c-1.5 5-3.2 8.2-4.3 9.8-.9 1.4-2 2.8-4.3 4a15 15 0 0 1-6 2c-1.7.1-4.3.3-7.9.3h-24.7l-7 23.3c-.6 2.3-.9 3.4-.5 4 .4.6 1.3 1.2 2.4 1.2l10.9-1-3.7 12.7h-12.2l-8.7-.2c-1.9-.2-3.9 0-5.2-1-1.1-1.1-3-2.5-2.8-3.8.1-1.3.6-3.4 1.4-6.3l22.3-74.4z" fill="#FEFEFE"></path><path d="m452.4 317.8-1.4 7.1c-.6 2.2-1.2 3.9-2.8 5.3-1.8 1.5-3.7 3-8.5 3l-8.8.5-.1 8c-.1 2.1.5 1.9.8 2.3.4.4.8.5 1.2.7l2.8-.2 8.3-.4-3.5 11.7h-9.6c-6.7 0-11.8-.2-13.3-1.4-1.7-1-2-2.3-2-4.6l.7-31.2h15.4l-.2 6.4h3.7c1.3 0 2.2-.1 2.7-.4.6-.3.9-.9 1-1.6l1.6-5h12.1v-.2zm-219.3-156-10.5 48.6c-2.2 9.3-3.7 16-8.9 20.3-3 2.5-6.5 3.6-10.5 3.6-6.6 0-10.3-3.2-11-9.4v-2l2-12.6s10.3-42 12.2-47.6v-.6c-20.1.2-23.7 0-24-.3l-.6 3-10.5 47.4-1 4-1.7 13.1c0 3.9.7 7.1 2.3 9.7 4.8 8.6 18.6 9.8 26.4 9.8 10 0 19.4-2.2 25.7-6 11-6.6 14-17 16.5-26l1.2-4.7s10.7-43.6 12.5-49.3l.2-.6c-14.6.1-18.9 0-20.3-.3v-.1zm59 86.6c-7.2 0-9.7 0-18.1.3l-.3-.6 2.1-9.6 1-4.4a190 190 0 0 0 3.3-17.2c.2-1.5.6-5.2-3.5-5.2-1.8 0-3.6.9-5.4 1.7-1 3.7-3 13.9-4 18.5-2.1 9.8-2.2 11-3.2 15.8l-.6.6c-7.3-.1-10-.1-18.4.3l-.4-.7 4.1-17.6a251 251 0 0 0 5.4-29.9l.7-.4c8.3-1.1 10.3-1.4 19.3-3.2l.7.8-1.3 5 4.5-2.6a28 28 0 0 1 11.5-2.7c4 0 8.3 1.2 10 5.8 1.7 4 .7 9-1.6 19l-1.2 5c-2.2 11-2.6 13-3.9 20.6l-.8.6v.1zm29 0h-9.8c-2.7 0-5.3.2-9.3.4l-.2-.4-.2-.4a51 51 0 0 1 2.3-7c.5-1.5 1-3 2-7.3 1.3-5.5 2.1-9.4 2.6-12.8.6-3.3 1-6.1 1.4-9.3l.3-.3.3-.3 9.8-1.4 10.2-1.8.2.4v.4l-2.4 10.4-2.4 10.3c-1.5 7.3-2.3 10-2.6 12l-1.1 6.6-.4.3-.4.3h-.3zm46-25.6c-.3 1.8-2 8.8-4.2 11.8-1.5 2.2-3.3 3.5-5.3 3.5-.7 0-4.2 0-4.3-5.3 0-2.6.5-5.3 1.2-8.3 1.8-8.4 4.1-15.4 9.8-15.4 4.4 0 4.8 5.2 2.8 13.7zm18.7.8c2.5-11 .5-16.3-1.8-19.4-3.8-4.8-10.4-6.4-17.2-6.4-4.2 0-13.9.4-21.5 7.5-5.5 5.1-8.1 12.1-9.6 18.8-1.5 6.8-3.3 19 7.9 23.6 3.4 1.5 8.4 2 11.6 2 8.2 0 16.5-2.4 22.9-9 4.8-5.5 7-13.6 7.8-17.1zm174.4 26c-8.6 0-11.1 0-19.1.4l-.5-.6a974 974 0 0 0 6.3-25c2.5-10.9 3.1-15.5 4-21.8l.6-.6c8.5-1.2 11-1.5 20-3.2l.1.7-4.8 20.5c-3.3 14.3-4.5 21.6-5.7 29.2l-.9.6v-.1z" fill="#FEFEFE"></path><path d="M547.8 224.2c-.5 1.7-2.1 8.8-4.3 11.8-1.4 2-5 3.4-7 3.4-.5 0-4 0-4.2-5.2 0-2.6.5-5.3 1.2-8.3 1.8-8.2 4.1-15.2 9.8-15.2 4.5 0 6.4 5.1 4.5 13.6v-.1zm17 .8c2.5-11-7.6-1-9.2-4.6-2.5-5.8-1-17.2-10.9-21.1-3.8-1.6-12.8.4-20.4 7.5-5.4 5-8.1 12-9.6 18.7-1.5 6.7-3.3 19 7.8 23.3 3.5 1.6 6.7 2 10 1.8 11.1-.6 19.6-17.7 26-24.4 4.8-5.3 5.6 2 6.3-1.2zm-130 23.4c-7-.1-9.5-.1-18 .3l-.2-.6 2.2-9.6 1-4.4c1.5-6.8 3-14.8 3.2-17.3.2-1.4.6-5-3.4-5-1.8 0-3.7.8-5.4 1.6-1 3.7-3 13.9-4 18.5l-3.2 15.8-.6.6c-7.3-.1-10-.1-18.4.3l-.4-.7 4.1-17.6c3.6-15.8 4.4-21.8 5.4-29.9l.6-.4a246 246 0 0 0 19.3-3.2l.7.8-1.2 5 4.4-2.6a28 28 0 0 1 11.5-2.7c4 0 8.2 1.2 10 5.8 1.7 4 .6 9-1.7 19l-1.2 5c-2.3 11-2.6 13-3.9 20.6l-.8.6v.1zm62-86.5-6 .1a258 258 0 0 1-24.1-.2l-.7 3.1-5.5 26-14 57.8c13.7-.2 19.1-.2 21.5.1l3.7-18 2.8-11.6s.9-1.2 1.7-1.7h1.2c11.7 0 24.9 0 35.2-7.6a38 38 0 0 0 15-30.3c0-3.7-.8-7.3-2.9-10-5.3-7.5-15.7-7.6-27.8-7.7zm7.8 27c-1.2 5.8-5 10.7-9.7 13-4 2-8.7 2.2-13.6 2.2H478l.2-1.2 5.9-25.9.2-1.3v-1l2.4.1 12.5 1c4.7 2 6.8 6.8 5.3 13.2zm127.3 8.7-.8-.8c-8.8 1.8-10.4 2-18.5 3.2l-.6.7-.1.4v-.1c-6 14-6 11-10.8 22.1v-1.3l-1.3-24-.7-1c-9.4 1.9-9.6 2.2-18 3.3l-.7.7v1c1 5.5.9 4.3 1.9 13l1.6 12.7c.9 7.1 1.4 10.6 2.4 21.3-5.8 9.6-7.1 13.3-12.7 21.8l.3.8c8.4-.3 10.2-.3 16.5-.3l1.3-1.6c4.7-10.1 40.3-71.8 40.3-71.8h-.1zm-302.8 7c4.8-3.4 5.4-8 1.4-10.4-4-2.4-11.2-1.7-16 1.7-4.7 3.2-5.2 7.8-1.2 10.3 4 2.3 11 1.7 15.8-1.7z" fill="#FEFEFE"></path><path d="m590.3 270.9-7 12c-2 4-6.2 7.2-12.6 7.2l-11.1-.2 3.2-10.8h2.2c1.1 0 2-.2 2.6-.5.6-.2.9-.6 1.4-1.2l4.1-6.6h17.3v.1z" fill="#FEFEFE"></path> </svg>',
        maxLength: 19,
    },
    {
        name: "uzcard",
        regex: /^8600\d{0,12}/,
        icon: '<svg xml:space="preserve" style="clip-rule:evenodd;fill-rule:evenodd;image-rendering:optimizeQuality;shape-rendering:geometricPrecision;text-rendering:geometricPrecision" xmlns="http://www.w3.org/2000/svg" viewBox="0 -0.29 750.55 471"><path d="M346.28 1253.65c.21-33.37 31.08-62.03 64.33-60.36 554.26.04 1108.56 0 1662.83.08 33.12-1.71 64.07 26.79 64.36 60.07.42 213.73-.04 427.45.25 641.17-172.31 75.24-354.79 126.28-540.18 156.78-415.95 67.36-844.68 35.28-1251.84-68.95.25-242.93-.17-485.86.25-728.79z" style="fill:#003997;fill-rule:nonzero" transform="matrix(.41883 0 0 .41883 -144.929 -500.045)"></path>     <path d="M346.36 2012.14c135 40.63 273.52 67.41 413.27 84.96 231.19 29.04 532.62 40.84 763.67 18.44 187.4-12.05 428.57-57.64 614.67-103.4.12 80.61.08 161.19.04 241.8.33 25.12-15.87 50.08-39.79 58.54-17.12 7.25-36.03 4.83-54.07 5.16-544.43-.08-1088.9.04-1633.34-.04-32.62.79-63.95-26.29-64.32-59.53-.38-81.99-.17-163.98-.13-245.93z" style="fill:#81cc00;fill-rule:nonzero" transform="matrix(.41883 0 0 .41883 -144.929 -500.045)"></path>     <path d="M1824.18 1668.27c-6.46 41.74-12.67 83.53-19.46 125.23 18.08-.17 37.95 1.92 53.66-9 31.45-21.37 43.25-70.91 19.83-102.11-12.79-16.62-35.45-14.29-54.03-14.12zm-66.41-61.87c35.7-.46 71.41-.54 107.11-.04 35.33.71 71.74 17.83 89.11 49.66 27 48.28 14.38 111.98-21.95 152.02-27.17 30.83-68.24 47.49-108.95 47.83-34.03.08-68.03.08-102.07-.13 11.96-83.15 24.46-166.23 36.75-249.34zm-181.15 62.2c-2.29 16.79-4.83 33.5-7.08 50.29 17.25-1.3 38.25 4.91 52-8.67 11.79-10.04 12.66-32.7-3-39.41-13.5-4.25-28-1.63-41.92-2.21zm-103.19 186.93c13-82.9 23.41-166.31 38.45-248.84 38.41.67 76.87-.12 115.28.38 23.45.87 48.87 5.45 66.28 22.49 13.13 12.58 17.83 31.58 16.13 49.33-1.88 33.2-23.13 62.41-50.16 80.53 12.79 32.12 26.66 63.83 38.95 96.16-19.42.33-38.79.62-58.16.2-12.46.59-23.37-8.29-28.71-18.95-8.87-18.58-13.37-38.96-22.37-57.45-9.58-2.29-19.41-.71-29.04-.09-3.37 25.54-7.95 50.87-11.62 76.37-25.04.29-50.03.46-75.03-.13zm-154.82-88.15c17.5-.04 35.04-.04 52.58 0-4.66-31.62-7.7-63.41-12.71-94.95-13.62 31.5-26.28 63.41-39.87 94.95zm-108.86 87.82c39.54-83.36 79.45-166.6 120.41-249.26 25.95.33 51.91.17 77.86.13 16.16 83.07 31.33 166.39 46.58 249.67-24.04.21-48.08.21-72.08 0-1.58-10.91-2.95-21.83-4.29-32.74-27.41 0-54.82.04-82.24-.04-4.66 10.83-9.37 21.7-14.04 32.53-24.08.04-48.16.42-72.2-.29zm-414.03-247.55c5.96-2.62 12.92-1.12 19.33-1.63 60.25.38 120.45-.08 180.69.25-5.62 21.13-.08 48.04-18.83 63.45-38.91 40.71-76.99 82.16-115.86 122.91 28.91 0 57.82-.13 86.74 0 6.25 22.66 16.95 43.66 30.83 62.61-75.08 1.3-150.19.46-225.22.34 2.58-16.25 4.08-33.12 11.49-48.08 6.8-13.21 17.42-23.83 27.5-34.54 33.12-34.29 65.99-68.82 98.82-103.4-35.08-.25-70.16.91-105.19-.67 3.62-20.33 5.54-40.99 9.7-61.24zm-279.79 33.33c-1.05-17.96 14.87-34.5 32.74-34.62 16.92-.67 33.87-.09 50.83.04-7.17 47.87-14.5 95.65-21.54 143.52-4.08 27.79-1.12 59.16 18.04 81.16 9.96 12.29 25.2 17.71 38.99 24.5-28.95.41-57.91.54-86.82.04-17.83-.54-33.33-17.13-32.24-35-.09-59.86-.09-119.77 0-179.64zm564.55-25.87c50.03-22.13 114.73-18.25 155.4 20.99-12.54 19.09-24.54 38.58-37.21 57.58-19.37-17.41-45.7-26.29-71.61-22.37-39.92 3.71-68.12 48.12-58.12 86.03 8.37 27.45 41.2 38.62 67.28 33.45 20.25-2.66 37.83-13.79 54.12-25.37 8.79 18.42 17.21 37 25.83 55.54-24.46 19.54-53.29 34.95-84.95 37.82-37.28 3.71-78.49-.95-108.23-25.74-23.25-19.13-35-49.62-34.58-79.33.58-58.78 38.41-114.94 92.07-138.6z" style="fill:#fff;fill-rule:nonzero" transform="matrix(.41883 0 0 .41883 -144.929 -500.045)"></path>     <path d="M616.08 1728.55c6.54-40.83 11.5-81.86 18.29-122.65 41.66-.33 83.28-.25 124.94-.08-.33 37.99-11.83 74.78-13.16 112.69l-3.29.04c-1.13 36.29-9.59 71.78-13.96 107.7-31.58.41-63.74 2.83-93.99-8.13-6.04-5.62-11.92-11.37-17.75-17.16-7.21-23.54-4.62-48.5-1.08-72.41z" style="fill:#fe4504;fill-rule:nonzero" transform="matrix(.41883 0 0 .41883 -144.929 -500.045)"></path></svg>',
        maxLength: 19,
    },
    {
        name: "humo",
        regex: /^98\d{0,14}/,
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 37 23.9"><defs><style>.cls-1{fill:#4a5b5b;}.cls-2{fill:#fbfbfb;}</style></defs><g id="Слой_2" data-name="Слой 2"><g id="Слой_1-2" data-name="Слой 1"><rect class="cls-1" width="37" height="23.9" rx="4.54"/><rect class="cls-2" x="5.51" y="8.86" width="25.98" height="1.57"/><rect class="cls-2" x="24.43" y="14.37" width="7.06" height="1.57"/><rect class="cls-2" x="14.17" y="14.37" width="7.06" height="1.57"/></g></g></svg>',
        maxLength: 19,

    },
    {
        name: "other",
        regex: /^[0-9 ]+$/,
        icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 37 23.9"><defs><style>.cls-1{fill:#4a5b5b;}.cls-2{fill:#fbfbfb;}</style></defs><g id="Слой_2" data-name="Слой 2"><g id="Слой_1-2" data-name="Слой 1"><rect class="cls-1" width="37" height="23.9" rx="4.54"/><rect class="cls-2" x="5.51" y="8.86" width="25.98" height="1.57"/><rect class="cls-2" x="24.43" y="14.37" width="7.06" height="1.57"/><rect class="cls-2" x="14.17" y="14.37" width="7.06" height="1.57"/></g></g></svg>',
        maxLength: 19,
    },
];

/**
 * replaceValue for the replace function
 * @param match
 * @param group1
 * @param group2
 * @param group3
 * @returns {*}
 */
function replaceValueFunction(match, group1, group2, group3) {
    let result = group1;
    if (group2) result += " " + group2;
    if (group3) result += " " + group3;
    return result;
}

/**
 * Luhn algorithm to validate card
 * @param cardNumber
 * @returns {boolean}
 */
function luhnAlgorithm(cardNumber) {
    let intCreditCardArr = cardNumber.replace(/\D/g, '').split('').map(Number);

    for (let i = intCreditCardArr.length - 2; i >= 0; i -= 2) {
        let tempValue = intCreditCardArr[i] * 2;

        if (tempValue > 9) {
            tempValue = tempValue % 10 + 1;
        }

        intCreditCardArr[i] = tempValue;
    }

    let total = 0;

    for (let int of intCreditCardArr) {
        total += int;
    }

    return total % 10 === 0;
}


/**
 * Date validation function
 * @param date
 * @returns {number}
 */
function dateValidate(date) {
    if (date.length >= 1) {
        let month = date.slice(0, 2);

        const firstDigitOfMonth = month.slice(0, 1);

        if (firstDigitOfMonth !== '0' && firstDigitOfMonth !== '1') {
            return 0;
        }

        if (date.length >= 2) {
            if (Number(month) > 12 || month === '00') {
                return 1;
            }

            if (date.length >= 3) {
                let year = date.slice(2, 4);
                let firstDigitOfYear = Number(year.slice(0, 1));

                const currentDate = new Date();
                const currentMonth = currentDate.getMonth() + 1;
                const currentYear = currentDate.getFullYear() % 100;

                if (firstDigitOfYear < Math.floor(currentYear / 10)) {
                    return 2;
                }

                if (date.length === 4) {
                    year = Number(year);
                    if (year < currentYear) {
                        return 3;
                    }

                    if (year === currentYear && Number(month) < currentMonth) {
                        return 4;
                    }
                }
            }
        }
    }

    return -1;
}

/**
 * Type credit cards
 * @type {{16: {replaceValue: (function(*, *, *, *): *), searchValue: RegExp}, 17: {replaceValue: (function(*, *, *, *): *), searchValue: RegExp}, 19: {replaceValue: string, searchValue: RegExp}}}
 */
const typeOfCard = {
    19: {
        searchValue: /(\d{4})(?=\d)/g,
        replaceValue: "$1 ",
    },
    17: {
        searchValue: /(\d{4})(\d{0,6})(\d*)/,
        replaceValue: replaceValueFunction,
    },
    16: {
        searchValue: /(\d{4})(\d{0,6})(\d*)/,
        replaceValue: replaceValueFunction,
    },
};

document.addEventListener("DOMContentLoaded", () => {
    const inputNumber = document.querySelector(".card__input-number");
    const inputMonth = document.querySelector(".card__input-month");
    const inputCvv = document.querySelector(".card__input-cvv");
    const inputImg = document.querySelector(".card__img");

    let currentMaxLength = 19;

    inputNumber.addEventListener("input", handleCardInput);
    inputMonth.addEventListener("input", handleMonthInput);
    inputCvv.addEventListener("input", handleCvvInput);

    inputNumber.addEventListener('focus', inputNumberFocus);

    inputNumber.addEventListener('blur', inputNumberBlur);
    inputMonth.addEventListener('blur', inputMonthBlur);
    inputCvv.addEventListener('blur', inputCvvBlur);

    inputNumber.addEventListener('blur', startValidateForm);
    inputMonth.addEventListener('blur', startValidateForm);
    inputCvv.addEventListener('blur', startValidateForm);

    inputNumber.addEventListener("keydown", inputNumberKeyDown);
    inputMonth.addEventListener("keydown", inputMonthKeyDown)

    /**
     * Credit card validation
     */
    function handleCardInput(e) {

        // console.log(e);

        let selectionStart = inputNumber.selectionStart;
        let oldValue = inputNumber.value;

        let cardNumber = inputNumber.value.replace(/\D/g, "");
        let maxLength = currentMaxLength;
        const luhnResult = luhnAlgorithm(inputNumber.value);
        updateCardImage(cardNumber);

        if (maxLength !== currentMaxLength) {
            inputNumber.maxLength = currentMaxLength;
        }

        inputNumber.value = cardNumber.replace(
            typeOfCard[currentMaxLength].searchValue,
            typeOfCard[currentMaxLength].replaceValue
        );

        if (inputNumber.value.length === currentMaxLength) {
            if (luhnResult) {
                inputNumber.classList.remove('error');
                inputNumber.blur();
                inputMonth.focus();
                return;
            } else {
                inputNumber.classList.add('error');
            }
        }

        if (selectionStart === oldValue.length && oldValue.slice(0, -1) + ' ' + oldValue.slice(-1, -2)) {
            selectionStart += 3;
            if(inputNumber.value.length === currentMaxLength && luhnResult) {
                inputNumber.blur();
                inputMonth.focus();
                return;
            }
        }

        inputNumber.setSelectionRange(selectionStart, selectionStart);
    }

    /**
     * function to update card icon and set new currentMaxLength
     * @param cardNumber
     */
    function updateCardImage(cardNumber) {
        for (let item of cardsRegex) {
            if (item.regex.test(cardNumber)) {
                inputImg.innerHTML = item.icon;
                currentMaxLength = item.maxLength;
                inputCvv.style.display = item.name === "uzcard" || item.name === "humo" ? "none" : "block";
                break;
            }
        }
    }

    /**
     * Expiry date validation
     */
    function handleMonthInput() {
        let dateValue = inputMonth.value;

        dateValue = dateValue.replace(/\D/g, '');

        let outputOfDateValidate = dateValidate(dateValue);
        if (outputOfDateValidate !== -1) {
            dateValue = dateValue.slice(0, outputOfDateValidate);
            if (outputOfDateValidate === 4) {
                inputMonth.classList.add('error');
            }
        } else {
            inputMonth.classList.remove('error');
        }

        if (dateValue.length > 2) {
            dateValue = dateValue.slice(0, 2) + '/' + dateValue.slice(2);
        }

        inputMonth.value = dateValue;
    }

    /**
     * CVV code validation
     */
    function handleCvvInput() {
        const cvvRegex = /^[0-9]{3,4}$/;

        let cvvValue = inputCvv.value = inputCvv.value.replace(/\D/g, '');

        cvvValue = cvvValue.slice(0, 3);

        if (cvvRegex.test(cvvValue)) {
            inputCvv.value = cvvValue;
            if (inputCvv.value.length === 3) {
                inputCvv.classList.remove('error');
            }
        }
    }

    let localCardNumber = '';

    /**
     * Focus handler for number input
     */
    function inputNumberFocus() {
        console.log('onFocus', inputNumber)
        inputMonth.classList.add('hide');
        inputCvv.classList.add('hide');

        if (!inputNumber.classList.contains('error')) {
            inputNumber.value = localCardNumber;
        }
    }

    /**
     * Blur handler for number input
     */
    function inputNumberBlur() {
        console.log('onBlur')
        let inputNumberValue = inputNumber.value;
        inputMonth.classList.remove('hide');
        inputCvv.classList.remove('hide');

        console.log('inputNumberValue', inputNumberValue)
        // console.log(inputNumberValue, inputNumberValue.length, currentMaxLength, luhnAlgorithm(inputNumberValue))

        if (inputNumberValue.length === currentMaxLength && luhnAlgorithm(inputNumberValue)) {
            inputNumber.classList.remove('error');
            localCardNumber = inputNumber.value;
            inputNumber.value = localCardNumber.slice(0, 4) + ' ... ' + localCardNumber.slice(-4);

            if (!inputNumberValue.length) inputNumber.value = '';
        } else if (!inputNumberValue.contains(' ... ')) {
            inputNumber.classList.add('error');
        }
    }

    /**
     * Blur handler for month input
     */
    function inputMonthBlur() {
        let inputMonthValue = inputMonth.value.replace(/\D/g, '');
        if (inputMonthValue.length < 4) {
            inputMonth.classList.add('error');
        }
    }

    /**
     * Blur handler for cvv input
     */
    function inputCvvBlur() {
        if (inputCvv.value.length < 3) {
            inputCvv.classList.add('error');
        }
    }

    /**
     * KeyDown handler for number input
     * @param e
     */
    function inputNumberKeyDown(e) {
        if (e.currentTarget.value.length === currentMaxLength && Number.isInteger(Number(e.key)) && e.key !== ' ' && luhnAlgorithm(e.currentTarget.value)) {
            inputMonth.classList.remove('hide');
            inputCvv.classList.remove('hide');
            inputMonth.focus();
        }
        if(e.key === 'Tab') {
            setTimeout(() => {
                inputMonth.focus();
            }, 0);
        }
    }

    /**
     * KeyDown handler for month input
     * @param e
     */
    function inputMonthKeyDown(e) {
        if (e.currentTarget.value.length === 5 && Number.isInteger(Number(e.key)) && e.key !== ' ' && !e.currentTarget.classList.contains('error')) {
            inputCvv.focus();
        }
    }

    function startValidateForm() {
        validateForm(localCardNumber.length === currentMaxLength && inputMonth.value.length === 5 && (inputCvv.value.length === 3 || inputCvv.style.display === "none"));
    }

    //TODO: refactor this function and call func
    function validateForm(isValid) {
        if (isValid && !inputNumber.classList.contains('error') && !inputMonth.classList.contains('error') && !inputCvv.classList.contains('error')) {
            console.log('ok')
        }
        else {
            console.log('error')
        }

    }

});
